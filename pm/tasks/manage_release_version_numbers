# Motivation

Currently, the project applies [semantic versioning](http://semver.org/) to releases by convention.
Since each change to the mainline branch is effectively considered a release, this applies to every update of the mainline branch.
In practice, the release version numbers have not been updated as rigorously as they should have been.

This could lead to multiple different releases having the same version number.
Therefore, releases with different contents have not been uniquely identifiable.

Ideally, release version numbers could be managed in a more automated manner that helps prevent version conflicts between different releases.
There are two main requirements for achieving this goal:
1. Depending on the nature of a task, the release version number must change according to the semantic versioning rules.
   Reviewers shall be able to see which version change is introduced by a task and to assess whether it is correct given the other changes in the task.
2. Updating the release version number in each task directly is problematic.
   With multiple tasks in progress or under review, merging down changes from the mainline branch would lead to either a conflict in the version number (if they are different on the mainline and task branches) or to change disappearing from the task branch if it happens to be identical to that on the mainline branch.
   Therefore, a task shall document which version change it requires not by directly changing the release version number itself, but by recording this information through another mechanism.
   That mechanism shall make it easy to review the version number change and avoid conflicts when merging the mainline branch.
3. With such improvements in place, release automation can be further improved.
   The `task.py integrate` command can implicitly create a new git tag of the pattern `v{version}` pointing to the updated HEAD revision of the master branch.
   This can help trigger the continuous integration service to create a new release.


# Goals

- The overall goal of this task is to make it less likely that the release version number accidentally remains unmodified on the mainline branch when integrating a new task branch.

## Proposed Solution

1. The version change required by a task shall be documented in the task's task description file under `pm/tasks/`.
   To do so, the new section 'Release Impact' shall be introduced.
   Its heading shall read as exactly one of the three options `# Release Impact: Major', `# Release Impact: Minor', or `# Release Impact: Patch'.
   These impact levels are directly equivalent to [semantic versioning](http://semver.org/).
   Note that the version does not only apply to the RTOS C API, but also to build tools or code, such as the prj utility and its location in release archives.
   This shall help application developers in determining whether a version upgrade can impact their build infrastructure and/or application code.
2. Reviewers shall generally verify that the proposed version change is consistent with the semantic versioning rules and the other changes in the task.
   The file `internal-docs/task_management.md` shall be updated accordingly to document this.
3. The command `task.py integrate` shall update the actual release version number stored in `release_cfg.py` based on the _Release Impact_ section in the task description.
4. The command `task.py integrate` shall create a git tag `v{version}` for the updated master branch to trigger the creation of a new release.


# Release Impact: Patch


# Test Plan

- Verify that all existing regression tests pass.
- Verify that the changes meet the task goals and follow project conventions.
- Given the changes of this task, verify that the release impact documented above is consistent with the principles of [semantic versioning](http://semver.org/).
- Run `task.py integrate --offline` to integrate this task into the master branch without affecting the remote repository.
  Verify that this task was merged into the master branch.
  Verify that the master and task branches contain a commit that updated the patch number of the release version in the file `release_cfg.py`.
  Run `git tag --list` and verify that there is a new tag that is called `v{version}` for the updated release version and that points to the updated master branch.
  Run `git reset --hard origin/master` to revert the integration of this task into the master branch.
  Run `git checkout manage_release_version_numbers` to switch back to this task.
  Run `git reset --hard HEAD~1` to revert the update of the release version.
  Run `git tag --delete v{version}` replacing {version} with the updated version number to delete the created git tag.
